* get Rsamtools and Rhtslib (provisionally, from github.com/nhayden)
Rhtslib:
git clone --recursive https://github.com/nhayden/Rhtslib.git

Rsamtools:
git clone --recursive -b htslib https://github.com/nhayden/Rsamtools.git

* Rsamtools => Rhtslib + Rsamtools
samtools used to be a monolithic distribution that had the libbam,
libbcf, libtabix (as well as fa file) libraries.

Now the samtools environment has been redesigned. "Common"
functionality (the line is rather blurry) is in a separate library,
htslib, with applications (samtools, tabix, bcf) that use the
library. More data-/file-type-independent abstractions have been
introduced so less code is spent explicitly testing for file type,
etc.

* Why is the build system s'damn complicated?
Windows. I think htslib started with the intention of nominally
supporting Windows, but the rapid development of the library has
outpaced the willingnes to support and test Windows. The htslib
library itself as well as the build system is written in a
Unix-centric way.

(The first hit when you Google "htslib Windows" has the issue filed
for htslib in which people have asked about Windows support and I
informed the htslibbers that I got the unit tests to pass on Windows.)

Enter Gnulib.

** Autotools: autoconf, automake, libtool, Gnulib (not actually an autotool)
- diagram of autotools interaction:
  https://devmanual.gentoo.org/general-concepts/autotools/

*** autoconf:
- writes the configure script that probes the host environment by
  trying to compile (test for functionality and compiler
  characteristics) and link (test for library support) miniature
  programs
- abstraction: you don't have to compile a list by hand ahead of time
  which of your supported environments support various functionality
  (often system calls), etc.
- typically leverage preprocessor macros to say "use this function if
  available, or use this system call if not":
  - #ifdef HAVE_SYSCALL_ABC
    syscall_abc();
    #else
    syscall_xyz();
    #endif

*** automake:
- derives make rules for you, figures out what tools on the host
  system to use to get there
- abstraction: write metarules, i.e., "this is what I have to start
  from, this is what I want as my end product". For example, you don't
  ever have to mention .o (object) files because these are
  intermediate products; similar to how autoconf writes the configure
  scripts for you based on what you want to test

*** libtool
Handles intricacies of making libraries across platforms; static
libraries are pretty easy, libtool's strength comes in dynamic
libraries. If we didn't want the dynamic versions for Unix-like we
wouldn't need libtool.
*** gnulib: the imagination tool
- makes it so you can pretend you're on a reasonable platform, instead
  of fighting with the OS.
- the #ifdef syscall_abc #else syscall_xyz #endif gets replaced with

  syscall_abc

  that, if on an OS with syscall_xyz but not syscall_abc, wraps
  syscall_xyz and Does the Right Thing behind the scenes.

- or it makes possible things that would be impossible without a huge
  development burden--writing stand-in libraries and shims, etc. For a
  standalone example, it turned out the new samtools that depends on
  htslib requires the Unix-like libregex and regex.h; the top solution
  to get around libregex's absence on Windows? A libregex built using
  Gnulib!

But in order to be so slick, gnulib relies on autotools to figure out
the appropriate wrapping. Hence, the build system is damn complicated.

* What's in Rhtslib package?
The Rhtslib R package has a minimal R package wrapper (basically just
a vignette for linking against it and a configure script that changes
to the htslib dir and runs make there) around a git submodule that is
a fork of the htslib repository. Almost all of the upstream htslib
repository is included (for example, the unit test programs and perl
script with associated test files are included). You can cd into the
htslib subdirectory and muck around as if it were a standalone
repos. Running the unit tests works via `make check`.

** cleanup
As a placeholder to remind myself nothing's required for this

** configure
Places the files stashed in Rhtslib/tools in their proper locations:
i.e., tries to make it look as if you just finished running
`autoreconf -fi` in src/htslib

Note that there's no configure.win; I avoided this because it makes
dealing with the two architectures on Windows much more complicated;
if I remember correctly, code in the Makevars.win is run separately
for each architecture, but configure.win is only run once for both
architectures, making it almost impossible to manage cleanly. That's
why I rely on Makevars.win.

** R/
just a test function to confirm the version C function is exposed

** tools/
This is because there's a different version of the autotools suite on
every platform we support (or some tools are missing). Every time you
update one of the "high-abstraction files" (e.g., Makefile.am,
(test|lib)/Makefile.am, configure.ac you need to run `autoreconf -fi`
and stash updated versions of the files found in Rhtslib/tools. Note
test/Makefile.in => test_Makefile.in; same true for lib/Makefile.in

** src/
*** Makevars
What actually gets run directly by `R CMD INSTALL`; it figures out
some shell variables to pass to the configure script that gets run in
src/htslib, runs `make` in said directory, and then runs the make
installation targets (puts libhts.a and the headers in install
location)

*** Makevars.win
Puts handmade libhts.a and headers in install locations

*** winlib
handmade libhts.a for each Windows arch

* What's in htslib submodule?
** How htslib is different from upstream
divergence philosophy: I've tried to leave the fork of htslib intact
as much as possible to make it painless for htslibbers to incorporate
the changes upstream. The htslib submodule stands on its own as a
autool-/libtool-ized version of htslib. I've tried to only deviate on
points where the old build system relics interfere with building the
libraries with autotools and gnulib.

- adapted the build system to use autotools. There are significant
  differences; it's a rewrite that respects the orignal dependency
  relationships. It will be the lingering pain-point in continued
  integration with upstream if they don't integrate it
- added Gnulib: http://wiki.opencsw.org/adding-gnulib (included files
  found in m4/, snippet/, and lib/); added `#include "config.h"`(?) to
  almost all header files(?); see src/htslib/configure.ac to see the
  gnulib import statement
- a few in-code fixes to get things to behave right on Windows, mostly
  line-ending behavior for binary vs. plain text file types.

** aclocal.m4
See m4/; this is a bunch of m4 macro definitions that make sure
everything's in working order; not hand-maintained

https://www.gnu.org/software/automake/manual/html_node/aclocal-Invocation.html

** configure.ac (handwritten)
Superficially, input for autoconf; actually ties together all four
pieces: autoconf, automake, libtool, and Gnulib--you'll see each of
them mentioned in some way or another.

** cram/
Support for CRAM files. I think in a separate directory because of
different licensing since it's written by someone else.

** htslib/
htslib's header files

** htslib.mk, htslib.pc.in, htslib_vars.mk
mostly relics of old build system (retain for benefit of htslibbers if
they ever decide to accept, or discard if that becomes a no-go).

** INSTALL
obsolete relic from upstream; misinformation by this point!

** m4/
Part of Gnulib and friends, not hand-written; it stores macros that
don't come with autosuite. Would play a more important role if we had
wider range of OSs to support, since recent version have most of
what's needed.

** Makefile.am (hand-written)
Note: whenver you a file extension that looks like an 'l' has been
inserted, that's how libtool talks: .a => .la; .o => .lo and such

For things to build, Makefile.am talks in terms of "primaries" `*_<PRIMARY>`.
See http://www.gnu.org/software/automake/manual/html_node/Uniform.html &
https://www.sourceware.org/autobook/autobook/autobook_38.html

The important examples here are the _PROGRAMS (binary programs) and
_LTLIBRARIES primaries. I just want to illustrate:

lib_LTLIBRARIES = libhts.la # says I want to make a libtool library 'libhts.la'
liibhts_la_CPPFLAGS = <XXX> # note refer to something.ext as somethting_ext 'libhts.la' => 'libhts_la' (substitute '_' for '.')


** lib/
Where Gnulib lives
*** Makefile.am (not hand-written)
Generated by gnulib-tool when I imported Gnulib into the project

** run_tests.sh
Because of nature of autotools, need to string up tests in a way that
makes them happy; see test/Makefile.am

* Examples of linking against Rhtslib
- link2Rhtslib, to confirm correct linking github.com/nhayden/link2Rhtslib
- real packages: deepSNV or bamsignals, both good quality (focus is pileup)
  - deepSNV commit that switched over
- VariantAnnotation (maintained by Val): uses both library layer
  (libhts.a) as well as Rsamtools's application layer that's accreted
  on top, e.g., BAM_DATA struct, etc.

* What's in Rsamtools
libbam.a libbcf.a libtabix.a

Rhtslib: libhts.a


** oddities
- there are duplicate header file names if you consider the union of
  files for htslib and samtools.

* How to add to Gnulib modules
** --lgpl2!

* guide to what's in htslib submodule
configure.ac - handwritten
Makefile.am - handwritten
htslib.mk, htslib.pc.in, htslib_vars.mk - relics left from original build system
lib/ - where imported gnulib stuff lives
m4/ - macros for m4 macro language; part of the autotools environment
snippet/ - don't touch; never had a need to modify / look in it; just added .gitignore
test - mostly as it came to me through fork; added Makefile.am


* guide to Rhtslib
- when you update configure.ac, Makefile.am: run autoreconf -fi to
  generate the intermediates, and stash them in Rhtslib/tools

* toolbox
`nm -gC`
Windows Dependency Walker
otool -L

* build on Windows
*in msys shell*
cd Rhtslib/src/htslib
autoreconf -fi
source env_vars_to_build_Rhtslib.sh

# remind you of what needs to be set
./configure --help

*in Windows shell*
test that install and check work without any help from another shell
test BOTH architectures

*what to watch out for*
Make sure that R CMD build|INSTALL|check do both architectures
